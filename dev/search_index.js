var documenterSearchIndex = {"docs":
[{"location":"lib/public.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"lib/public.html#RandomisationModels-Module","page":"API","title":"RandomisationModels Module","text":"","category":"section"},{"location":"lib/public.html","page":"API","title":"API","text":"Modules = [RandomisationModels]\nPrivate = false","category":"page"},{"location":"lib/public.html#RandomisationModels.randomise!-Tuple{Random.AbstractRNG, RandomisationModels.RandomisationModel, Int64}","page":"API","title":"RandomisationModels.randomise!","text":"randomise!(rng::AbstractRNG, RM::RandomisationModel, n::Int)\n\nGenerate a n random allocation's from a randomisation model using prob(RM) and the random number generator provided.\n\n\n\n\n\n","category":"method"},{"location":"lib/public.html#RandomisationModels.randomise!-Tuple{Random.AbstractRNG, RandomisationModels.RandomisationModel}","page":"API","title":"RandomisationModels.randomise!","text":"randomise!(rng::AbstractRNG, RM::RandomisationModel)\n\nGenerate a single random allocation from a randomisation model using prob(RM) and the random number generator provided.\n\n\n\n\n\n","category":"method"},{"location":"lib/public.html#RandomisationModels.randomise!-Tuple{RandomisationModels.RandomisationModel, Int64}","page":"API","title":"RandomisationModels.randomise!","text":"randomise!(RM::RandomisationModel, n::Int)\n\nGenerate a n random allocation's from a randomisation model using prob(RM) and the global RNG.\n\n\n\n\n\n","category":"method"},{"location":"lib/public.html#RandomisationModels.randomise!-Tuple{RandomisationModels.RandomisationModel}","page":"API","title":"RandomisationModels.randomise!","text":"randomise!(RM::RandomisationModel)\n\nGenerate a single random allocation from a randomisation model using prob(RM) and the global RNG.\n\n\n\n\n\n","category":"method"},{"location":"lib/public.html#RandomisationModels.randomise-Tuple{Random.AbstractRNG, RandomisationModels.RandomisationModel, Int64}","page":"API","title":"RandomisationModels.randomise","text":"randomise(rng::AbstractRNG, RM::RandomisationModel, n::Int)\n\nGenerates n allocations\n\n\n\n\n\n","category":"method"},{"location":"lib/public.html#RandomisationModels.randomise-Tuple{Random.AbstractRNG, RandomisationModels.RandomisationModel}","page":"API","title":"RandomisationModels.randomise","text":"randomise(rng::AbstractRNG, RM::RandomisationModel)\n\nGenerates allocations from the randomisation model without updating the models.\n\n\n\n\n\n","category":"method"},{"location":"lib/public.html#RandomisationModels.randomize-Tuple{Random.AbstractRNG, RandomisationModels.RandomisationModel}","page":"API","title":"RandomisationModels.randomize","text":"randomize(rng::AbstractRNG, RM::RandomisationModel)\n\nGenerates allocations from the randomisation model without updating the models.\n\n\n\n\n\n","category":"method"},{"location":"lib/public.html#Util-Sub-Module","page":"API","title":"Util Sub-Module","text":"","category":"section"},{"location":"lib/public.html","page":"API","title":"API","text":"Modules = [RandomisationModels.Util]\nPrivate = true","category":"page"},{"location":"lib/public.html#RandomisationModels.Util","page":"API","title":"RandomisationModels.Util","text":"Util\n\nA submodule that provides various utility functions used elsewhere in the main Module.\n\n\n\n\n\n","category":"module"},{"location":"lib/public.html#RandomisationModels.Util.isnormvec-Tuple{AbstractVector{<:Real}}","page":"API","title":"RandomisationModels.Util.isnormvec","text":"isnormvec(p)\n\nCheck whether in abstract vector p sums to 1.\n\n\n\n\n\n","category":"method"},{"location":"lib/public.html#RandomisationModels.Util.isposvec-Tuple{AbstractVector{<:Real}}","page":"API","title":"RandomisationModels.Util.isposvec","text":"isposvec(p)\n\nCheck whether in abstract vector p is a positive vector, i.e. that pᵢ≥0∀i.\n\n\n\n\n\n","category":"method"},{"location":"lib/public.html#RandomisationModels.Util.isprobvec-Tuple{AbstractVector{<:Real}}","page":"API","title":"RandomisationModels.Util.isprobvec","text":"isprobvec(p)\n\nCheck whether in abstract vector p is a probability vector, i.e. that ∑p=1 and pᵢ≥0∀i.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RandomisationModels.jl","page":"Home","title":"RandomisationModels.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation for RandomisationModels.jl","category":"page"}]
}
